<?php
// auto-generated by sfPropelAdmin
// date: 2007/03/28 18:09:58
?>
<?php

/**
 * autoGrade actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoGrade
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class autoGradeActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('grade', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();


    // pager
    $this->pager = new sfPropelPager('Grade', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('grade', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('grade', 'edit');
  }

  public function executeEdit()
  {
    $this->grade = $this->getGradeOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateGradeFromRequest();

      $this->saveGrade($this->grade);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('grade/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('grade/list');
      }
      else
      {
        return $this->redirect('grade/edit?id='.$this->grade->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->grade = GradePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->grade);

    try
    {
      $this->deleteGrade($this->grade);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Grade. Make sure it does not have any associated items.');
      return $this->forward('grade', 'list');
    }

    return $this->redirect('grade/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->grade = $this->getGradeOrCreate();
    $this->updateGradeFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveGrade($grade)
  {
    $grade->save();

  }

  protected function deleteGrade($grade)
  {
    $grade->delete();
  }

  protected function updateGradeFromRequest()
  {
    $grade = $this->getRequestParameter('grade');

    if (isset($grade['name']))
    {
      $this->grade->setName($grade['name']);
    }
    if (isset($grade['description']))
    {
      $this->grade->setDescription($grade['description']);
    }
    if (isset($grade['department_id']))
    {
    $this->grade->setDepartmentId($grade['department_id'] ? $grade['department_id'] : null);
    }
    if (isset($grade['created_at']))
    {
      if ($grade['created_at'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($grade['created_at']))
          {
            $value = $dateFormat->format($grade['created_at'], 'I', $dateFormat->getInputPattern('g'));
          }
          else
          {
            $value_array = $grade['created_at'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->grade->setCreatedAt($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->grade->setCreatedAt(null);
      }
    }
  }

  protected function getGradeOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $grade = new Grade();
    }
    else
    {
      $grade = GradePeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($grade);
    }

    return $grade;
  }

  protected function processFilters()
  {
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/grade/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/grade/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/grade/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/grade/sort'))
    {
      $sort_column = GradePeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/grade/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'grade{id}' => 'Id:',
      'grade{name}' => 'Name:',
      'grade{description}' => 'Description:',
      'grade{department_id}' => 'Department:',
      'grade{created_at}' => 'Created at:',
    );
  }
}
