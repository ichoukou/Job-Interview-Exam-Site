<?php
// auto-generated by sfPropelAdmin
// date: 2007/03/28 18:09:57
?>
<?php

/**
 * autoLevel_preset actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoLevel_preset
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class autoLevel_presetActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('level_preset', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/level_preset/filters');

    // pager
    $this->pager = new sfPropelPager('LevelPreset', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('level_preset', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('level_preset', 'edit');
  }

  public function executeEdit()
  {
    $this->level_preset = $this->getLevelPresetOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateLevelPresetFromRequest();

      $this->saveLevelPreset($this->level_preset);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('level_preset/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('level_preset/list');
      }
      else
      {
        return $this->redirect('level_preset/edit?id='.$this->level_preset->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->level_preset = LevelPresetPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->level_preset);

    try
    {
      $this->deleteLevelPreset($this->level_preset);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Level preset. Make sure it does not have any associated items.');
      return $this->forward('level_preset', 'list');
    }

    return $this->redirect('level_preset/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->level_preset = $this->getLevelPresetOrCreate();
    $this->updateLevelPresetFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveLevelPreset($level_preset)
  {
    $level_preset->save();

  }

  protected function deleteLevelPreset($level_preset)
  {
    $level_preset->delete();
  }

  protected function updateLevelPresetFromRequest()
  {
    $level_preset = $this->getRequestParameter('level_preset');

    if (isset($level_preset['name']))
    {
      $this->level_preset->setName($level_preset['name']);
    }
    if (isset($level_preset['department_id']))
    {
    $this->level_preset->setDepartmentId($level_preset['department_id'] ? $level_preset['department_id'] : null);
    }
    if (isset($level_preset['grade_id']))
    {
    $this->level_preset->setGradeId($level_preset['grade_id'] ? $level_preset['grade_id'] : null);
    }
    if (isset($level_preset['level']))
    {
      $this->level_preset->setLevel($level_preset['level']);
    }
    if (isset($level_preset['question_no']))
    {
      $this->level_preset->setQuestionNo($level_preset['question_no']);
    }
    if (isset($level_preset['created_at']))
    {
      if ($level_preset['created_at'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($level_preset['created_at']))
          {
            $value = $dateFormat->format($level_preset['created_at'], 'I', $dateFormat->getInputPattern('g'));
          }
          else
          {
            $value_array = $level_preset['created_at'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->level_preset->setCreatedAt($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->level_preset->setCreatedAt(null);
      }
    }
  }

  protected function getLevelPresetOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $level_preset = new LevelPreset();
    }
    else
    {
      $level_preset = LevelPresetPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($level_preset);
    }

    return $level_preset;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/level_preset/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/level_preset/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/level_preset/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/level_preset/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/level_preset/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['name_is_empty']))
    {
      $criterion = $c->getNewCriterion(LevelPresetPeer::NAME, '');
      $criterion->addOr($c->getNewCriterion(LevelPresetPeer::NAME, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['name']) && $this->filters['name'] !== '')
    {
      $c->add(LevelPresetPeer::NAME, strtr($this->filters['name'], '*', '%'), Criteria::LIKE);
    }
    if (isset($this->filters['grade_id_is_empty']))
    {
      $criterion = $c->getNewCriterion(LevelPresetPeer::GRADE_ID, '');
      $criterion->addOr($c->getNewCriterion(LevelPresetPeer::GRADE_ID, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['grade_id']) && $this->filters['grade_id'] !== '')
    {
      $c->add(LevelPresetPeer::GRADE_ID, $this->filters['grade_id']);
    }
    if (isset($this->filters['department_id_is_empty']))
    {
      $criterion = $c->getNewCriterion(LevelPresetPeer::DEPARTMENT_ID, '');
      $criterion->addOr($c->getNewCriterion(LevelPresetPeer::DEPARTMENT_ID, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['department_id']) && $this->filters['department_id'] !== '')
    {
      $c->add(LevelPresetPeer::DEPARTMENT_ID, $this->filters['department_id']);
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/level_preset/sort'))
    {
      $sort_column = LevelPresetPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/level_preset/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'level_preset{id}' => 'Id:',
      'level_preset{name}' => 'Type of Question:',
      'level_preset{department_id}' => 'Department:',
      'level_preset{grade_id}' => 'Grade:',
      'level_preset{level}' => 'Level:',
      'level_preset{question_no}' => 'No Of Question:',
      'level_preset{created_at}' => 'Created at:',
    );
  }
}
