<?php
// auto-generated by sfPropelAdmin
// date: 2007/03/28 18:01:35
?>
<?php

/**
 * autoAnswer_option actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoAnswer_option
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class autoAnswer_optionActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('answer_option', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();


    // pager
    $this->pager = new sfPropelPager('AnswerOption', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('answer_option', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('answer_option', 'edit');
  }

  public function executeEdit()
  {
    $this->answer_option = $this->getAnswerOptionOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateAnswerOptionFromRequest();

      $this->saveAnswerOption($this->answer_option);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('answer_option/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('answer_option/list');
      }
      else
      {
        return $this->redirect('answer_option/edit?id='.$this->answer_option->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->answer_option = AnswerOptionPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->answer_option);

    try
    {
      $this->deleteAnswerOption($this->answer_option);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Answer option. Make sure it does not have any associated items.');
      return $this->forward('answer_option', 'list');
    }

    return $this->redirect('answer_option/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->answer_option = $this->getAnswerOptionOrCreate();
    $this->updateAnswerOptionFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveAnswerOption($answer_option)
  {
    $answer_option->save();

  }

  protected function deleteAnswerOption($answer_option)
  {
    $answer_option->delete();
  }

  protected function updateAnswerOptionFromRequest()
  {
    $answer_option = $this->getRequestParameter('answer_option');

    if (isset($answer_option['name']))
    {
      $this->answer_option->setName($answer_option['name']);
    }
    if (isset($answer_option['option_name']))
    {
      $this->answer_option->setOptionName($answer_option['option_name']);
    }
  }

  protected function getAnswerOptionOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $answer_option = new AnswerOption();
    }
    else
    {
      $answer_option = AnswerOptionPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($answer_option);
    }

    return $answer_option;
  }

  protected function processFilters()
  {
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/answer_option/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/answer_option/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/answer_option/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/answer_option/sort'))
    {
      $sort_column = AnswerOptionPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/answer_option/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'answer_option{id}' => 'Id:',
      'answer_option{name}' => 'Name:',
      'answer_option{option_name}' => 'Option name:',
    );
  }
}
