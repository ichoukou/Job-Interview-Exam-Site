<?php
// auto-generated by sfPropelAdmin
// date: 2007/03/28 18:09:58
?>
<?php

/**
 * autoDepartment actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoDepartment
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class autoDepartmentActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('department', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();


    // pager
    $this->pager = new sfPropelPager('Department', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('department', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('department', 'edit');
  }

  public function executeEdit()
  {
    $this->department = $this->getDepartmentOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateDepartmentFromRequest();

      $this->saveDepartment($this->department);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('department/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('department/list');
      }
      else
      {
        return $this->redirect('department/edit?id='.$this->department->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->department = DepartmentPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->department);

    try
    {
      $this->deleteDepartment($this->department);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Department. Make sure it does not have any associated items.');
      return $this->forward('department', 'list');
    }

    return $this->redirect('department/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->department = $this->getDepartmentOrCreate();
    $this->updateDepartmentFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveDepartment($department)
  {
    $department->save();

  }

  protected function deleteDepartment($department)
  {
    $department->delete();
  }

  protected function updateDepartmentFromRequest()
  {
    $department = $this->getRequestParameter('department');

    if (isset($department['name']))
    {
      $this->department->setName($department['name']);
    }
    if (isset($department['user_id']))
    {
    $this->department->setUserId($department['user_id'] ? $department['user_id'] : null);
    }
    if (isset($department['created_at']))
    {
      if ($department['created_at'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($department['created_at']))
          {
            $value = $dateFormat->format($department['created_at'], 'I', $dateFormat->getInputPattern('g'));
          }
          else
          {
            $value_array = $department['created_at'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->department->setCreatedAt($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->department->setCreatedAt(null);
      }
    }
  }

  protected function getDepartmentOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $department = new Department();
    }
    else
    {
      $department = DepartmentPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($department);
    }

    return $department;
  }

  protected function processFilters()
  {
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/department/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/department/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/department/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/department/sort'))
    {
      $sort_column = DepartmentPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/department/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'department{id}' => 'Id:',
      'department{name}' => 'Name:',
      'department{user_id}' => 'User:',
      'department{created_at}' => 'Created at:',
    );
  }
}
